{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studia\\\\semestr 5\\\\biu\\\\projekt1-MarcinRozkwitalski\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport morseCodes from './components/morseCodes';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  function convertToMorse(input) {\n    let output = \"\";\n    let morseArray = input.split(\"\");\n\n    for (let i = 0; i < morseArray.length; i++) {\n      if (morseArray[i].toUpperCase() == \" \") {\n        output += \"\\xa0\\xa0\";\n      } else {\n        output += morseCodes[morseArray[i].toUpperCase()];\n      }\n    }\n\n    this.setState({\n      output,\n      input\n    });\n  }\n\n  const [firstVal, setFirstVal] = useState();\n  const [secondVal, setSecondVal] = useState();\n\n  function changeFirstValue(e) {\n    setSecondVal(e.target.value);\n  }\n\n  function changeSecondValue(e) {\n    setFirstVal(e.target.value);\n    setSecondVal(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: firstVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"konwertuj\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: secondVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"rjaloqNWHHUA9/EKyXh8EY5RRrQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Studia/semestr 5/biu/projekt1-MarcinRozkwitalski/src/App.js"],"names":["morseCodes","React","useState","useEffect","App","convertToMorse","input","output","morseArray","split","i","length","toUpperCase","setState","firstVal","setFirstVal","secondVal","setSecondVal","changeFirstValue","e","target","value","changeSecondValue"],"mappings":";;;;AACA,OAAO,WAAP;AACA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAGd,WAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC1B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAjB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,UAAGF,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,MAA+B,GAAlC,EAAsC;AAClCL,QAAAA,MAAM,IAAI,UAAV;AACH,OAFD,MAGK;AACDA,QAAAA,MAAM,IAAIP,UAAU,CAACQ,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,EAAD,CAApB;AACH;AACJ;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA,MAAD;AAASD,MAAAA;AAAT,KAAd;AACH;;AAED,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,EAA1C;;AAEA,WAASgB,gBAAT,CAA0BC,CAA1B,EAA6B;AACzBF,IAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH;;AAED,WAASC,iBAAT,CAA2BH,CAA3B,EAA6B;AACzBJ,IAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACAJ,IAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH;;AAED,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,KAAK,EAAEP;AAFX;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eASI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,KAAK,EAAEE;AAFX;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA9CD;;GAAMZ,G;;KAAAA,G;AAgDN,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport morseCodes from './components/morseCodes'\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n\n\n    function convertToMorse(input){\n        let output = \"\"\n        let morseArray = input.split(\"\")\n        for(let i = 0; i < morseArray.length; i++){\n            if(morseArray[i].toUpperCase() == \" \"){\n                output += \"\\xa0\\xa0\"\n            }\n            else {\n                output += morseCodes[morseArray[i].toUpperCase()]\n            }\n        }\n        this.setState({output, input})\n    }\n\n    const [firstVal, setFirstVal] = useState();\n    const [secondVal, setSecondVal] = useState();\n\n    function changeFirstValue(e) {\n        setSecondVal(e.target.value);\n    }\n\n    function changeSecondValue(e){\n        setFirstVal(e.target.value);\n        setSecondVal(e.target.value);\n    }\n\n    return (\n        <div>\n            <input\n                type='text'\n                value={firstVal}\n\n            ></input>\n            <button>\n                konwertuj\n            </button>\n            <input\n                type='text'\n                value={secondVal}\n\n            ></input>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}