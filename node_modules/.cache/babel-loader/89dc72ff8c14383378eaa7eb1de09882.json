{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studia\\\\semestr 5\\\\biu\\\\projekt1-MarcinRozkwitalski\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport morseCodes from './components/morseCodes';\nimport React, { Component, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      output: \"\"\n    };\n  }\n\n  convertToMorse(input) {\n    let output = \"\";\n    let morseArray = input.split(\"\");\n\n    if (morseArray[1] == \".\" || morseArray[1] == \"-\") {\n      morseArray = input.split(\" \");\n\n      for (let i = 0; i < morseArray.length; i++) {\n        if (morseArray[i] == \".\" || morseArray[i] == \"-\") {\n          morseArray = input.split(\" \");\n        }\n\n        if (morseArray[i].toUpperCase() == \" \") {\n          output += \"\\xa0\";\n        } else {\n          output += \"\\xa0\" + morseCodes[morseArray[i].toUpperCase()];\n        }\n      }\n\n      this.setState({\n        output,\n        input\n      });\n    }\n\n    if (morseArray[1] != \".\" || morseArray[1] != \"-\") {\n      for (let i = 0; i < morseArray.length; i++) {\n        if (morseArray[i].toUpperCase() == \" \") {\n          output += \"\\xa0\";\n        } else {\n          output += \"\\xa0\" + morseCodes[morseArray[i].toUpperCase()];\n        }\n      }\n\n      this.setState({\n        output,\n        input\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Morse Code Translator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            onChange: e => this.convertToMorse(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"original: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              value: this.state.input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 39\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"morse: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              value: this.state.output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 36\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Studia/semestr 5/biu/projekt1-MarcinRozkwitalski/src/App.js"],"names":["morseCodes","React","Component","useState","useEffect","App","constructor","props","state","input","output","convertToMorse","morseArray","split","i","length","toUpperCase","setState","render","e","target","value"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport morseCodes from './components/morseCodes'\nimport React, { Component, useState, useEffect } from 'react';\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            input: \"\",\n            output: \"\"\n        }\n    }\n\n    convertToMorse(input){\n        let output = \"\"\n        let morseArray = input.split(\"\")\n        if(morseArray[1] == \".\" || morseArray[1] == \"-\"){\n            morseArray = input.split(\" \")\n            for(let i = 0; i < morseArray.length; i++){\n                if(morseArray[i] == \".\" || morseArray[i] == \"-\"){\n                    morseArray = input.split(\" \")\n                }\n\n                if(morseArray[i].toUpperCase() == \" \"){\n                    output += \"\\xa0\"\n                }\n\n                else {\n                    output += \"\\xa0\" + morseCodes[morseArray[i].toUpperCase()]\n                }\n            }\n            this.setState({output, input})\n        }\n        if(morseArray[1] != \".\" || morseArray[1] != \"-\") {\n            for (let i = 0; i < morseArray.length; i++) {\n                if (morseArray[i].toUpperCase() == \" \") {\n                    output += \"\\xa0\"\n                } else {\n                    output += \"\\xa0\" + morseCodes[morseArray[i].toUpperCase()]\n                }\n            }\n            this.setState({output, input})\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1>Morse Code Translator</h1>\n                        <input className=\"form-control\"\n                               onChange={(e)=>this.convertToMorse(e.target.value)}/>\n                        <h3>original: <input className=\"form-control\" value={this.state.input} /> </h3>\n                        <h3>morse: <input className=\"form-control\" value={this.state.output} /> </h3>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}