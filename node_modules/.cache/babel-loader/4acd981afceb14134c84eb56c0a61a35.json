{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studia\\\\semestr 5\\\\biu\\\\projekt1-MarcinRozkwitalski\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // Components\n\nimport QuestionCard from './components/QuestionCard'; // types\n\nimport { Difficulty } from './API'; // Styles\n\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value; // Check answer against correct answer\n\n      const correct = questions[number].correct_answer === answer; // Add score if answer is correct\n\n      if (correct) setScore(prev => prev + 1); // Save the answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REACT QUIZ\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 30\n      }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 28\n      }, this) : null, !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Studia/semestr 5/biu/projekt1-MarcinRozkwitalski/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","Difficulty","GlobalStyle","Wrapper","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","nextQ","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { fetchQuizQuestions } from './API';\r\n// Components\r\nimport QuestionCard from './components/QuestionCard';\r\n// types\r\nimport { QuestionsState, Difficulty } from './API';\r\n// Styles\r\nimport { GlobalStyle, Wrapper } from './App.styles';\r\n\r\nexport type AnswerObject = {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App: React.FC = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [questions, setQuestions] = useState<QuestionsState[]>([]);\r\n    const [number, setNumber] = useState(0);\r\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver] = useState(true);\r\n\r\n    const startTrivia = async () => {\r\n        setLoading(true);\r\n        setGameOver(false);\r\n        const newQuestions = await fetchQuizQuestions(\r\n            TOTAL_QUESTIONS,\r\n            Difficulty.EASY\r\n        );\r\n        setQuestions(newQuestions);\r\n        setScore(0);\r\n        setUserAnswers([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    };\r\n\r\n    const checkAnswer = (e: any) => {\r\n        if (!gameOver) {\r\n            // User's answer\r\n            const answer = e.currentTarget.value;\r\n            // Check answer against correct answer\r\n            const correct = questions[number].correct_answer === answer;\r\n            // Add score if answer is correct\r\n            if (correct) setScore((prev) => prev + 1);\r\n            // Save the answer in the array for user answers\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer,\r\n            };\r\n            setUserAnswers((prev) => [...prev, answerObject]);\r\n        }\r\n    };\r\n\r\n    const nextQuestion = () => {\r\n        // Move on to the next question if not the last question\r\n        const nextQ = number + 1;\r\n\r\n        if (nextQ === TOTAL_QUESTIONS) {\r\n            setGameOver(true);\r\n        } else {\r\n            setNumber(nextQ);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            <Wrapper>\r\n                <h1>REACT QUIZ</h1>\r\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                    <button className='start' onClick={startTrivia}>\r\n                        Start\r\n                    </button>\r\n                ) : null}\r\n                {!gameOver ? <p className='score'>Score: {score}</p> : null}\r\n                {loading ? <p>Loading Questions...</p> : null}\r\n                {!loading && !gameOver && (\r\n                    <QuestionCard\r\n                        questionNr={number + 1}\r\n                        totalQuestions={TOTAL_QUESTIONS}\r\n                        question={questions[number].question}\r\n                        answers={questions[number].answers}\r\n                        userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n                        callback={checkAnswer}\r\n                    />\r\n                )}\r\n                {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\r\n                    <button className='next' onClick={nextQuestion}>\r\n                        Next Question\r\n                    </button>\r\n                ) : null}\r\n            </Wrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}