{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studia\\\\semestr 5\\\\biu\\\\projekt1-MarcinRozkwitalski\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport morseCodes from './components/morseCodes';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction convertToMorse(input) {\n  let output = \"\";\n  let morseArray = input.split(\"\");\n\n  for (let i = 0; i < morseArray.length; i++) {\n    if (morseArray[i].toUpperCase() == \" \") {\n      output += \"\\xa0\\xa0\";\n    } else {\n      output += morseCodes[morseArray[i].toUpperCase()];\n    }\n  }\n\n  this.setState({\n    output,\n    input\n  });\n}\n\nconst [firstVal, setFirstVal] = useState();\nconst [secondVal, setSecondVal] = useState();\n\nfunction changeFirstValue(e) {\n  setSecondVal(e.target.value);\n}\n\nfunction changeSecondValue(e) {\n  setFirstVal(e.target.value);\n  setSecondVal(convertToMorse(setFirstVal(e.target.value)));\n}\n\nclass App extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: firstVal,\n        onChange: changeSecondValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: secondVal,\n        onChange: changeFirstValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Studia/semestr 5/biu/projekt1-MarcinRozkwitalski/src/App.js"],"names":["morseCodes","React","useState","useEffect","convertToMorse","input","output","morseArray","split","i","length","toUpperCase","setState","firstVal","setFirstVal","secondVal","setSecondVal","changeFirstValue","e","target","value","changeSecondValue","App","Component","render"],"mappings":";;AACA,OAAO,WAAP;AACA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACG,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIF,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,MAA+B,GAAnC,EAAwC;AACpCL,MAAAA,MAAM,IAAI,UAAV;AACH,KAFD,MAEO;AACHA,MAAAA,MAAM,IAAIN,UAAU,CAACO,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,EAAD,CAApB;AACH;AACJ;;AACD,OAAKC,QAAL,CAAc;AAACN,IAAAA,MAAD;AAASD,IAAAA;AAAT,GAAd;AACH;;AAED,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,EAAxC;AACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,EAA1C;;AAEA,SAASe,gBAAT,CAA0BC,CAA1B,EAA6B;AACzBF,EAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH;;AAED,SAASC,iBAAT,CAA2BH,CAA3B,EAA8B;AAC1BJ,EAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACAJ,EAAAA,YAAY,CAACZ,cAAc,CAACU,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CAAf,CAAZ;AACH;;AAED,MAAME,GAAN,SAAkBrB,KAAK,CAACsB,SAAxB,CAAiC;AAE7BC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEX,QAFX;AAGI,QAAA,QAAQ,EAAEQ;AAHd;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEN,SAFX;AAGI,QAAA,QAAQ,EAAEE;AAHd;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AAlB4B;;AAqBjC,eAAeK,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport morseCodes from './components/morseCodes'\nimport React, { useState, useEffect } from 'react';\n\n\nfunction convertToMorse(input) {\n    let output = \"\"\n    let morseArray = input.split(\"\")\n    for (let i = 0; i < morseArray.length; i++) {\n        if (morseArray[i].toUpperCase() == \" \") {\n            output += \"\\xa0\\xa0\"\n        } else {\n            output += morseCodes[morseArray[i].toUpperCase()]\n        }\n    }\n    this.setState({output, input})\n}\n\nconst [firstVal, setFirstVal] = useState();\nconst [secondVal, setSecondVal] = useState();\n\nfunction changeFirstValue(e) {\n    setSecondVal(e.target.value);\n}\n\nfunction changeSecondValue(e) {\n    setFirstVal(e.target.value);\n    setSecondVal(convertToMorse(setFirstVal(e.target.value)));\n}\n\nclass App extends React.Component{\n\n    render() {\n        return (\n            <div>\n                <input\n                    type='text'\n                    value={firstVal}\n                    onChange={changeSecondValue}\n                ></input>\n\n                <input\n                    type='text'\n                    value={secondVal}\n                    onChange={changeFirstValue}\n                ></input>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}