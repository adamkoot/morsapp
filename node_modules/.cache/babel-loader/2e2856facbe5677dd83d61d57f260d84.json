{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamk\\\\Desktop\\\\morsapp\\\\morsapp\\\\src\\\\components\\\\Morse.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class componentName extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      output: \"\",\n      valueOfA: 0,\n      valueOfB: 0,\n      valueOfKeyword: \"\",\n      radioOption: \"\",\n      textOfFile: \"\",\n      showHideMorse: true,\n      showHideAffine: false,\n      showHideVigenere: false\n    };\n  }\n\n  convert(input) {\n    this.setState({\n      input: input\n    });\n    let showHideMorse = this.state.showHideMorse;\n    let showHideAffine = this.state.showHideAffine;\n    let showHideVigenere = this.state.showHideVigenere; //to jest mors\n\n    if (showHideMorse === true) {\n      let output = \"\";\n      let morseArray;\n\n      if (this.state.radioOption === \"encrypt\") {\n        morseArray = input.split(\"\");\n\n        for (let i = 0; i < morseArray.length; i++) {\n          if (morseArray[i] === \" \") {\n            output += \" \";\n          } else {\n            output += morseCodes[morseArray[i]];\n          }\n        }\n\n        output += \" \";\n        console.log(output);\n        this.setState({\n          output: output\n        });\n      } else if (this.state.radioOption === \"decrypt\") {\n        morseArray = input.split(\" \");\n\n        for (let i = 0; i < morseArray.length; i++) {\n          output += morseCodesDotsDashes[morseArray[i]];\n        }\n\n        console.log(output);\n        this.setState({\n          output: output\n        });\n      }\n    } //to jest afiniczny\n\n\n    if (showHideAffine === true) {\n      let chars = input.split(\"\");\n      let currChar = chars;\n      let output;\n      let a = this.state.valueOfA;\n      let b = this.state.valueOfB;\n      let invert = 0;\n      let encryptedWord = \"\";\n      let currInt = 0;\n      let currEnc = \"\";\n\n      for (let j = 0; j < 100; j++) {\n        if ((26 * j + 1) % a === 0) invert = (26 * j + 1) / a;\n      }\n\n      if (this.state.radioOption === \"encrypt\") {\n        for (let i = 0; i < chars.length; i++) {\n          if (currChar[i] === \" \" || currChar[i] === \",\" || currChar[i] === \".\") {\n            if (currChar[i] === \" \") {\n              encryptedWord += \" \";\n            }\n\n            if (currChar[i] === \",\") {\n              encryptedWord += \",\";\n            }\n\n            if (currChar[i] === \".\") {\n              encryptedWord += \".\";\n            }\n          } else {\n            currInt = parseInt(currChar[i], 36) - 10;\n            currEnc = (a * currInt + b) % 26;\n            encryptedWord += String.fromCharCode(97 + currEnc);\n          }\n        }\n\n        output = encryptedWord; //console.log(encryptedWord);\n\n        this.setState({\n          output: output\n        });\n      }\n\n      if (this.state.radioOption === \"decrypt\") {\n        for (let i = 0; i < chars.length; i++) {\n          if (currChar[i] === \" \" || currChar[i] === \",\" || currChar[i] === \".\") {\n            if (currChar[i] === \" \") {\n              encryptedWord += \" \";\n            }\n\n            if (currChar[i] === \",\") {\n              encryptedWord += \",\";\n            }\n\n            if (currChar[i] === \".\") {\n              encryptedWord += \".\";\n            }\n          } else {\n            currInt = parseInt(currChar[i], 36) - 10;\n            currEnc = invert * (currInt - b + 26) % 26;\n            encryptedWord += String.fromCharCode(97 + currEnc);\n          }\n        }\n\n        output = encryptedWord;\n        this.setState({\n          output: output\n        });\n      }\n    } //to jest Vigenre\n\n\n    if (showHideVigenere === true) {\n      let vigenereArray = input.split(\"\");\n      let keyword = this.state.valueOfKeyword;\n      let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n      let output = \"\";\n      let j = 0;\n\n      if (this.state.radioOption === \"encrypt\") {\n        let cipherText = \"\";\n\n        for (let i = 0; i < vigenereArray.length; i++) {\n          const inputCharacter = vigenereArray[i];\n          const inputCharacterIndex = alphabet.indexOf(inputCharacter);\n\n          if (inputCharacterIndex === -1) {\n            cipherText += inputCharacter;\n            continue;\n          }\n\n          const keywordCharacter = keyword[j];\n          const keywordCharacterIndex = alphabet.indexOf(keywordCharacter);\n          const indicesSum = inputCharacterIndex + keywordCharacterIndex;\n          const cipherCharacterIndex = indicesSum % 26;\n          const cipherTextCharacter = alphabet[cipherCharacterIndex];\n          j = j === keyword.length - 1 ? 0 : j + 1;\n          cipherText += cipherTextCharacter;\n          output = cipherText;\n        }\n\n        this.setState({\n          output: output\n        });\n      }\n\n      if (this.state.radioOption === \"decrypt\") {\n        let cipherText = input.split(\"\");\n        let plainText = \"\";\n\n        for (let i = 0; i < cipherText.length; i++) {\n          if (cipherText[i] === \",\" || cipherText[i] === \".\") {\n            if (cipherText[i] === \",\") {\n              plainText += \",\";\n            }\n\n            if (cipherText[i] === \".\") {\n              plainText += \".\";\n            }\n\n            output = plainText;\n          } else {\n            const ciphertextCharacter = cipherText[i];\n            const ciphertextCharacterIndex = alphabet.indexOf(ciphertextCharacter);\n\n            if (ciphertextCharacterIndex === -1) {\n              plainText += ciphertextCharacter;\n              continue;\n            }\n\n            const keyCharacter = keyword[j];\n            const keyCharacterIndex = alphabet.indexOf(keyCharacter);\n            const indicesSum = ciphertextCharacterIndex - keyCharacterIndex + 26;\n            const cipherCharacterIndex = indicesSum % 26;\n            const cipherTextCharacter = alphabet[cipherCharacterIndex];\n            j = j === keyword.length - 1 ? 0 : j + 1;\n            plainText += cipherTextCharacter;\n            output = plainText;\n          }\n        }\n\n        this.setState({\n          output: output\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-sm-9\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          id: \"input\",\n          value: this.state.input,\n          onChange: e => this.convert(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control-file\",\n        id: \"file\",\n        onChange: e => this.inputTextFromFile(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          id: \"output\",\n          value: this.state.output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.downloadOutputTxtFile,\n        className: \"btn btn-secondary\",\n        children: \"Download output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onChange: event => this.setOption(event),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"encrypt\",\n          name: \"option\",\n          id: \"encrypt\",\n          onChange: this.handleOptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), \"\\xA0encrypt\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          value: \"decrypt\",\n          name: \"option\",\n          id: \"decrypt\",\n          onChange: this.handleOptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), \"\\xA0decrypt\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/adamk/Desktop/morsapp/morsapp/src/components/Morse.jsx"],"names":["React","Component","componentName","constructor","props","state","input","output","valueOfA","valueOfB","valueOfKeyword","radioOption","textOfFile","showHideMorse","showHideAffine","showHideVigenere","convert","setState","morseArray","split","i","length","morseCodes","console","log","morseCodesDotsDashes","chars","currChar","a","b","invert","encryptedWord","currInt","currEnc","j","parseInt","String","fromCharCode","vigenereArray","keyword","alphabet","cipherText","inputCharacter","inputCharacterIndex","indexOf","keywordCharacter","keywordCharacterIndex","indicesSum","cipherCharacterIndex","cipherTextCharacter","plainText","ciphertextCharacter","ciphertextCharacterIndex","keyCharacter","keyCharacterIndex","render","e","target","value","inputTextFromFile","downloadOutputTxtFile","event","setOption","handleOptionChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class componentName extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          input: \"\",\r\n          output: \"\",\r\n          valueOfA: 0,\r\n          valueOfB: 0,\r\n          valueOfKeyword: \"\",\r\n          radioOption: \"\",\r\n          textOfFile: \"\",\r\n          showHideMorse: true,\r\n          showHideAffine: false,\r\n          showHideVigenere: false,\r\n        };\r\n      }\r\n\r\n\r\n      convert(input) {\r\n        this.setState({ input: input });\r\n        let showHideMorse = this.state.showHideMorse;\r\n        let showHideAffine = this.state.showHideAffine;\r\n        let showHideVigenere = this.state.showHideVigenere;\r\n    \r\n        //to jest mors\r\n        if (showHideMorse === true) {\r\n          let output = \"\";\r\n          let morseArray;\r\n          if (this.state.radioOption === \"encrypt\") {\r\n            morseArray = input.split(\"\");\r\n            for (let i = 0; i < morseArray.length; i++) {\r\n              if (morseArray[i] === \" \") {\r\n                output += \" \";\r\n              } else {\r\n                output += morseCodes[morseArray[i]];\r\n              }\r\n            }\r\n            output += \" \";\r\n            console.log(output);\r\n            this.setState({ output: output });\r\n          } else if (this.state.radioOption === \"decrypt\") {\r\n            morseArray = input.split(\" \");\r\n            for (let i = 0; i < morseArray.length; i++) {\r\n              output += morseCodesDotsDashes[morseArray[i]];\r\n            }\r\n            console.log(output);\r\n            this.setState({ output: output });\r\n          }\r\n        }\r\n    \r\n        //to jest afiniczny\r\n        if (showHideAffine === true) {\r\n          let chars = input.split(\"\");\r\n          let currChar = chars;\r\n          let output;\r\n          let a = this.state.valueOfA;\r\n          let b = this.state.valueOfB;\r\n          let invert = 0;\r\n          let encryptedWord = \"\";\r\n          let currInt = 0;\r\n          let currEnc = \"\";\r\n          for (let j = 0; j < 100; j++) {\r\n            if ((26 * j + 1) % a === 0) invert = (26 * j + 1) / a;\r\n          }\r\n          if (this.state.radioOption === \"encrypt\") {\r\n            for (let i = 0; i < chars.length; i++) {\r\n              if (\r\n                currChar[i] === \" \" ||\r\n                currChar[i] === \",\" ||\r\n                currChar[i] === \".\"\r\n              ) {\r\n                if (currChar[i] === \" \") {\r\n                  encryptedWord += \" \";\r\n                }\r\n                if (currChar[i] === \",\") {\r\n                  encryptedWord += \",\";\r\n                }\r\n                if (currChar[i] === \".\") {\r\n                  encryptedWord += \".\";\r\n                }\r\n              } else {\r\n                currInt = parseInt(currChar[i], 36) - 10;\r\n                currEnc = (a * currInt + b) % 26;\r\n                encryptedWord += String.fromCharCode(97 + currEnc);\r\n              }\r\n            }\r\n            output = encryptedWord;\r\n            //console.log(encryptedWord);\r\n            this.setState({ output: output });\r\n          }\r\n          if (this.state.radioOption === \"decrypt\") {\r\n            for (let i = 0; i < chars.length; i++) {\r\n              if (\r\n                currChar[i] === \" \" ||\r\n                currChar[i] === \",\" ||\r\n                currChar[i] === \".\"\r\n              ) {\r\n                if (currChar[i] === \" \") {\r\n                  encryptedWord += \" \";\r\n                }\r\n                if (currChar[i] === \",\") {\r\n                  encryptedWord += \",\";\r\n                }\r\n                if (currChar[i] === \".\") {\r\n                  encryptedWord += \".\";\r\n                }\r\n              } else {\r\n                currInt = parseInt(currChar[i], 36) - 10;\r\n                currEnc = (invert * (currInt - b + 26)) % 26;\r\n                encryptedWord += String.fromCharCode(97 + currEnc);\r\n              }\r\n            }\r\n            output = encryptedWord;\r\n            this.setState({ output: output });\r\n          }\r\n        }\r\n        //to jest Vigenre\r\n        if (showHideVigenere === true) {\r\n          let vigenereArray = input.split(\"\");\r\n          let keyword = this.state.valueOfKeyword;\r\n          let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n          let output = \"\";\r\n          let j = 0;\r\n          if (this.state.radioOption === \"encrypt\") {\r\n            let cipherText = \"\";\r\n            for (let i = 0; i < vigenereArray.length; i++) {\r\n              const inputCharacter = vigenereArray[i];\r\n              const inputCharacterIndex = alphabet.indexOf(inputCharacter);\r\n              if (inputCharacterIndex === -1) {\r\n                cipherText += inputCharacter;\r\n                continue;\r\n              }\r\n              const keywordCharacter = keyword[j];\r\n              const keywordCharacterIndex = alphabet.indexOf(keywordCharacter);\r\n              const indicesSum = inputCharacterIndex + keywordCharacterIndex;\r\n              const cipherCharacterIndex = indicesSum % 26;\r\n              const cipherTextCharacter = alphabet[cipherCharacterIndex];\r\n              j = j === keyword.length - 1 ? 0 : j + 1;\r\n              cipherText += cipherTextCharacter;\r\n              output = cipherText;\r\n            }\r\n            this.setState({ output: output });\r\n          }\r\n    \r\n          if (this.state.radioOption === \"decrypt\") {\r\n            let cipherText = input.split(\"\");\r\n            let plainText = \"\";\r\n            for (let i = 0; i < cipherText.length; i++) {\r\n              if (cipherText[i] === \",\" || cipherText[i] === \".\") {\r\n                if (cipherText[i] === \",\") {\r\n                  plainText += \",\";\r\n                }\r\n                if (cipherText[i] === \".\") {\r\n                  plainText += \".\";\r\n                }\r\n                output = plainText;\r\n              } else {\r\n                const ciphertextCharacter = cipherText[i];\r\n                const ciphertextCharacterIndex =\r\n                  alphabet.indexOf(ciphertextCharacter);\r\n                if (ciphertextCharacterIndex === -1) {\r\n                  plainText += ciphertextCharacter;\r\n                  continue;\r\n                }\r\n                const keyCharacter = keyword[j];\r\n                const keyCharacterIndex = alphabet.indexOf(keyCharacter);\r\n                const indicesSum =\r\n                  ciphertextCharacterIndex - keyCharacterIndex + 26;\r\n                const cipherCharacterIndex = indicesSum % 26;\r\n                const cipherTextCharacter = alphabet[cipherCharacterIndex];\r\n                j = j === keyword.length - 1 ? 0 : j + 1;\r\n                plainText += cipherTextCharacter;\r\n                output = plainText;\r\n              }\r\n            }\r\n            this.setState({ output: output });\r\n          }\r\n        }\r\n      }\r\n  render() {\r\n    return (\r\n        <div className=\"col-sm-9\">\r\n        <h3>\r\n          <input\r\n            className=\"form-control\"\r\n            id=\"input\"\r\n            value={this.state.input}\r\n            onChange={(e) => this.convert(e.target.value)}\r\n          />{\" \"}\r\n        </h3>\r\n        <input\r\n          type=\"file\"\r\n          className=\"form-control-file\"\r\n          id=\"file\"\r\n          onChange={(e) => this.inputTextFromFile(e)}\r\n        />\r\n        <h3>\r\n          <input\r\n            className=\"form-control\"\r\n            id=\"output\"\r\n            value={this.state.output}\r\n          />{\" \"}\r\n        </h3>\r\n        <button\r\n          onClick={this.downloadOutputTxtFile}\r\n          className=\"btn btn-secondary\"\r\n        >\r\n          Download output\r\n        </button>\r\n        <div onChange={(event) => this.setOption(event)}>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"encrypt\"\r\n            name=\"option\"\r\n            id=\"encrypt\"\r\n            onChange={this.handleOptionChange}\r\n          />\r\n          &nbsp;encrypt&nbsp;&nbsp;&nbsp;\r\n          <input\r\n            type=\"radio\"\r\n            value=\"decrypt\"\r\n            name=\"option\"\r\n            id=\"decrypt\"\r\n            onChange={this.handleOptionChange}\r\n          />\r\n          &nbsp;decrypt\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}