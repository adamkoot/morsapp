{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studia\\\\semestr 5\\\\biu\\\\projekt1-MarcinRozkwitalski\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport morseCodes from './components/morseCodes';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const convertToMorse = input => {\n    let output = \"\";\n    let morseArray = input.split(\"\");\n\n    for (let i = 0; i < morseArray.length; i++) {\n      if (morseArray[i].toUpperCase() == \" \") {\n        output += \"\\xa0\\xa0\";\n      } else {\n        output += morseCodes[morseArray[i].toUpperCase()];\n      }\n    }\n\n    this.setState({\n      output,\n      input\n    });\n  };\n\n  const [firstVal, setFirstVal] = useState();\n  const [secondVal, setSecondVal] = useState();\n\n  const changeFirstValue = e => {\n    setSecondVal(e.target.value);\n  };\n\n  const changeSecondValue = e => {\n    setFirstVal(e.target.value); //setSecondVal(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: firstVal,\n      onChange: changeSecondValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: secondVal,\n      onChange: changeFirstValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"rjaloqNWHHUA9/EKyXh8EY5RRrQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Studia/semestr 5/biu/projekt1-MarcinRozkwitalski/src/App.js"],"names":["morseCodes","React","useState","useEffect","App","convertToMorse","input","output","morseArray","split","i","length","toUpperCase","setState","firstVal","setFirstVal","secondVal","setSecondVal","changeFirstValue","e","target","value","changeSecondValue"],"mappings":";;;;AACA,OAAO,WAAP;AACA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AAKV,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAjB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,UAAGF,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,MAA+B,GAAlC,EAAsC;AAClCL,QAAAA,MAAM,IAAI,UAAV;AACH,OAFD,MAGK;AACDA,QAAAA,MAAM,IAAIP,UAAU,CAACQ,UAAU,CAACE,CAAD,CAAV,CAAcE,WAAd,EAAD,CAApB;AACH;AACJ;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA,MAAD;AAASD,MAAAA;AAAT,KAAd;AACH,GAZD;;AAcA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,EAA1C;;AAEA,QAAMgB,gBAAgB,GAAIC,CAAD,IAAO;AAC5BF,IAAAA,YAAY,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,CAAD,IAAO;AAC7BJ,IAAAA,WAAW,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX,CAD6B,CAE7B;AACH,GAHD;;AAKA,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,KAAK,EAAEP,QAFX;AAGI,MAAA,QAAQ,EAAEQ;AAHd;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,KAAK,EAAEN,SAFX;AAGI,MAAA,QAAQ,EAAEE;AAHd;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA9CQd,G;;KAAAA,G;AAgDT,eAAeA,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport morseCodes from './components/morseCodes'\nimport React, { useState, useEffect } from 'react';\n\nfunction App(){\n\n\n\n\n    const convertToMorse = (input) => {\n        let output = \"\"\n        let morseArray = input.split(\"\")\n        for(let i = 0; i < morseArray.length; i++){\n            if(morseArray[i].toUpperCase() == \" \"){\n                output += \"\\xa0\\xa0\"\n            }\n            else {\n                output += morseCodes[morseArray[i].toUpperCase()]\n            }\n        }\n        this.setState({output, input})\n    }\n\n    const [firstVal, setFirstVal] = useState();\n    const [secondVal, setSecondVal] = useState();\n\n    const changeFirstValue = (e) => {\n        setSecondVal(e.target.value);\n    }\n\n    const changeSecondValue = (e) => {\n        setFirstVal(e.target.value);\n        //setSecondVal(e.target.value);\n    }\n\n    return (\n        <div>\n            <input\n                type='text'\n                value={firstVal}\n                onChange={changeSecondValue}\n            ></input>\n\n            <input\n                type='text'\n                value={secondVal}\n                onChange={changeFirstValue}\n            ></input>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}